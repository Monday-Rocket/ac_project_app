import java.text.SimpleDateFormat

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def signingProperties = new Properties()
def signingPropertiesFile = rootProject.file('signing.properties')
if (signingPropertiesFile.exists()) {
    signingPropertiesFile.withReader('UTF-8') {
        signingProperties.load(it)
    }
}
def _keyAlias = signingProperties.getProperty('key.alias')
def _keyPassword = signingProperties.getProperty('key.password')
def _storePassword = signingProperties.getProperty('store.password')

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "project.mr.ac_project_app"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias _keyAlias
            keyPassword _keyPassword
            storeFile file('../monday-key.jks')
            storePassword _storePassword
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->

            if (variant.buildType.name in ["release"]) {
                def prefixFirstName = "acp"

                if (variant.versionName != null) {
                    def outputFileName = "${prefixFirstName}_${variant.versionName}.aab"
                    def taskSuffix = variant.name.capitalize()
                    def bundleTaskName = "bundle${taskSuffix}"

                    def copyDir = new File("../../../../Release/")
                    def copyTaskName = "archive${taskSuffix}Copy"

                    if (tasks.findByName(bundleTaskName)) {
                        def copyTask = tasks.create(copyTaskName, Copy) {
                            from "${buildDir.path}/outputs/bundle/release/"
                            into copyDir.path
                            include "app-release.aab"
                            rename "app-release.aab", outputFileName
                        }

                        tasks[bundleTaskName].finalizedBy = [copyTask]
                    }
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
